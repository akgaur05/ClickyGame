{"version":3,"sources":["components/pages/Navbar/Navbar.js","components/pages/Modal/Modal.js","components/pages/GameCard/GameCard.js","components/pages/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","cursor","onClick","document","getElementsByClassName","classList","remove","href","paddingRight","score","paddingLeft","topScore","Modal","add","ClickCard","shuffleCards","clickedCharacter","id","handleClick","alt","name","src","image","Footer","text","App","state","cards","clickedCards","footerText","_document$getElements","getElementsByTagName","pageBody","Object","slicedToArray","_this","includes","setState","setTimeout","concat","toConsumableArray","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","renderCards","map","card","key","GameCard_GameCard","Navbar_Navbar","this","pages_Modal_Modal","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.006e065b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navbar(props) {\n\treturn(\n\t<div className=\"navbar-fixed\">\n\t\t<nav>\n\t\t\t<div className=\"nav-wrapper container\">\n\t\t\t\t<button style={{cursor: 'pointer'}}className='left' onClick={() => \n\t\t\t\t\t{document.getElementsByClassName('instructionsModal')[0].classList.remove('hide');\n\t\t\t\t}}>Instructions</button>\n\t\t\t\t<a href=\"/\" className='brand-logo center'>Remember What You Clicked!</a>\n\t\t\t\t<ul className='right'>\n\t\t\t\t\t<li style={{paddingRight: \"20px\"}}>Score: {props.score}</li>\n\t\t\t\t\t<li style={{paddingLeft: \"20px\"}}>Top Score: {props.topScore}</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n\t);\n}\nexport default Navbar;","import React from 'react';\nimport './Modal.css';\n\n\n\nfunction Modal() {\n\treturn (\n\t\t<div className=\"instructionsModal\">\n\t\t\t<div className=\"modal-content\">\n\t\t\t\t<h4 className=\"center\">Game Instructions</h4>\n\t\t\t\t<ol>\n\t\t\t\t\t<li>Click on an Image to start the game.</li>\n\t\t\t\t\t<li>Every time you click an image, the images get rearranged.</li>\n\t\t\t\t\t<li>If you pick the same image twice...You Lose!</li>\n\t\t\t\t\t<li>Click all 12 images without repeating...You Win!</li>\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div className=\"modal-footer white-text center\">\n\t\t\t\t<button className=\"waves-effect waves-light btn\" onClick={() => {document.getElementsByClassName('instructionsModal')[0].classList.add('hide');\n\t\t\t\t}}>Let's Play</button>\n\t\t\t</div>\t\n\t\t</div>\n\t)\n}\nexport default Modal;","import React from 'react';\nimport './GameCard.css';\n\nfunction handleClick(props) {\n\tprops.shuffleCards();\n\tprops.clickedCharacter(props.id);\n}\nfunction ClickCard(props) {\n\treturn (\n\t\t<div className=\"card img-container\" onClick={() => handleClick(props)}>\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t);\n}\nexport default ClickCard;","import React from 'react';\n\nfunction Footer(props) {\n  return (\n    <footer className=\"page-footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h5 className=\"center red-text footer-update\">{props.text}</h5>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\n\n\n\nexport default Footer;","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route ,Link } from \"react-router-dom\";\n// import logo from './img/lights.gif';\nimport './App.css';\nimport Navbar from './components/pages/Navbar/Navbar.js';\nimport Modal from './components/pages/Modal/Modal.js';\nimport ClickCard from './components/pages/GameCard/GameCard.js';\nimport Footer from './components/pages/Footer/Footer.js';\nimport cards from './hardGameCard.json';\nimport './index.css';\n\n//the below code is for levels\n// import Easy from \"./components/pages/GameCardLevels/Easy\";\n// import Medium from \"./components/pages/GameCard/GameCardLevels/Medium\";\n// import Hard from \"./components/pages/GameCard/GameCardLevels/Hard\";\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    score: 0,\n    topScore: 0,\n    clickedCards: [],\n    footerText: \"\"\n  }\n\n  clickedCharacter = (id) => {\n    const [pageBody] = document.getElementsByTagName('body');\n    if (this.state.clickedCards.includes(id)) {\n      this.setState({score: 0, clickedCards: []});\n      pageBody.classList.add('shakeWrapper');\n      this.setState({footerText: 'You picked that already! Start Over.'});\n      setTimeout(() => {\n        pageBody.classList.remove('shakeWrapper')\n      }, 500);\n      setTimeout(() => {\n        this.setState({footerText: \"\"})\n      }, 1800);\n    } else {\n      //Read the below link to add the state at the beginning of an array.We could have used concat but I tried to be fancy\n      // https://www.robinwieruch.de/react-state-array-add-update-remove/\n      this.setState(\n        {\n          clickedCards: [...this.state.clickedCards, id]\n        });\n      this.setState({score: this.state.score + 1});\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1});\n      } \n      if (this.state.score === 12) {\n        this.setState({footerText: \"You Won! Start Over?\"});\n        this.setState({score: 0, clickedCards: [], cards: cards});\n        setTimeout(() => {\n          this.setState({footerText: ''})\n        }, 1800)\n      } \n    }\n  }\n\n  // copied below from some net solutions\n  shuffleCards = (array) => {\n    let currentIndex = array.length;\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({cards:cards});\n  }\n  renderCards = (array) => {\n    return this.state.cards.map(card => (\n      <section className='col s4 m3 l3' key={card.id} id={card.id}>\n        <ClickCard\n          name={card.name} \n          image={card.image} \n          shuffleCards={() => {this.shuffleCards(this.state.cards)}}\n          clickedCharacter={() => {this.clickedCharacter(card.id)}}/>\n      </section>\n      )\n    )\n  }\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Navbar score={this.state.score} topScore={this.state.topScore}/>\n        <Modal />\n        <br />\n        <div className=\"container row cardWrapper\">\n          {this.renderCards(this.state.cards)}\n        </div>\n        <Footer text={this.state.footerText}/>\n      </div>\n    );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}